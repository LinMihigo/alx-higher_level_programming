===================
2-matrix_divided.py

Module: matrix_divided

This module provides a function to divide all elements of a matrix by a divisor. The function
ensures that the matrix is well-formed (i.e., all rows have the same size) and that the divisor
is a valid number. Division by zero is handled, and the result is rounded to two decimal places.

Functions:
    - matrix_divided(matrix, div): Divides all elements of a matrix by div, returning a new matrix.
    
Usage:
    >>> from matrix_divided import matrix_divided
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
    
Notes:
    - The function raises appropriate exceptions for invalid matrix structure or divisor.
    - Results are rounded to two decimal places.
    - Each row of the matrix must have the same size.
    - Division by zero is not allowed and will raise a ZeroDivisionError.

Raises:
    - TypeError: For invalid input types in matrix or div.
    - ZeroDivisionError: For division by zero.

===================
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Normal case
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

# Different divisor
>>> matrix_divided([[10, 20], [30, 40]], 10)
[[1.0, 2.0], [3.0, 4.0]]

# Matrix with floats
>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 2)
[[0.75, 1.25], [1.75, 2.25]]

# Invalid element in matrix
>>> matrix_divided([[1, 2], [3, "4"]], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Rows of unequal length
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Zero division
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Invalid divisor (not a number)
>>> matrix_divided([[1, 2], [3, 4]], "2")
Traceback (most recent call last):
    ...
TypeError: div must be a number+-
